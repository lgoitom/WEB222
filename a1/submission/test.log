
> web222-assignment-1@6.0.0 test
> jest --

PASS src/problem-03.test.js
FAIL src/problem-05.test.js
  ● Problem 5 - normalizeTime() function › a valid time in the form h:m:s AM/PM is returned as expected

    expect(received).toBe(expected) // Object.is equality

    Expected: "(13, 30, 0)"
    Received: null

      20 |   test('a valid time in the form h:m:s AM/PM is returned as expected', function () {
      21 |     let time = '01:30:00 PM';
    > 22 |     expect(normalizeTime(time)).toBe('(13, 30, 0)');
         |                                 ^
      23 |   });
      24 |
      25 |   test('a valid time in the form H:M:S is returned as expected', function () {

      at Object.toBe (src/problem-05.test.js:22:33)

  ● Problem 5 - normalizeTime() function › a valid time in the form H:M:S is returned as expected

    expect(received).toBe(expected) // Object.is equality

    Expected: "(13, 30, 0)"
    Received: null

      25 |   test('a valid time in the form H:M:S is returned as expected', function () {
      26 |     let time = '13:30:00';
    > 27 |     expect(normalizeTime(time)).toBe('(13, 30, 0)');
         |                                 ^
      28 |   });
      29 |
      30 |   test('an invalid time in the form h:m:s AM/PM is returned as null', function () {

      at Object.toBe (src/problem-05.test.js:27:33)

FAIL src/problem-06.test.js
  ● Problem 6 - formatTimes() › a single time is valid

    expect(received).toBe(expected) // Object.is equality

    Expected: "[(16, 26, 24)]"
    Received: "[]"

      4 |   test('a single time is valid', function () {
      5 |     let result = formatTimes('4:26:24 PM');
    > 6 |     expect(result).toBe('[(16, 26, 24)]');
        |                    ^
      7 |   });
      8 |
      9 |   test('valid times of the form h:m:s should be formatted correctly in a list', function () {

      at Object.toBe (src/problem-06.test.js:6:20)

  ● Problem 6 - formatTimes() › valid times of the form h:m:s should be formatted correctly in a list

    expect(received).toBe(expected) // Object.is equality

    Expected: "[(1, 16, 24), (1, 16, 25), (1, 16, 26)]"
    Received: "[]"

       9 |   test('valid times of the form h:m:s should be formatted correctly in a list', function () {
      10 |     let result = formatTimes('1:16:24', '1:16:25', '1:16:26');
    > 11 |     expect(result).toBe('[(1, 16, 24), (1, 16, 25), (1, 16, 26)]');
         |                    ^
      12 |   });
      13 |
      14 |   test('valid times of the form h:m:s AM/PM should be formatted correctly in a list', function () {

      at Object.toBe (src/problem-06.test.js:11:20)

  ● Problem 6 - formatTimes() › valid times of the form h:m:s AM/PM should be formatted correctly in a list

    expect(received).toBe(expected) // Object.is equality

    Expected: "[(16, 16, 24), (4, 16, 25)]"
    Received: "[]"

      14 |   test('valid times of the form h:m:s AM/PM should be formatted correctly in a list', function () {
      15 |     let result = formatTimes('4:16:24 PM', '4:16:25 AM');
    > 16 |     expect(result).toBe('[(16, 16, 24), (4, 16, 25)]');
         |                    ^
      17 |   });
      18 |
      19 |   test('invalid times are skipped', function () {

      at Object.toBe (src/problem-06.test.js:16:20)

  ● Problem 6 - formatTimes() › invalid times are skipped

    expect(received).toBe(expected) // Object.is equality

    Expected: "[(4, 16, 24), (4, 16, 25)]"
    Received: "[]"

      19 |   test('invalid times are skipped', function () {
      20 |     let result = formatTimes('4:16:24', '60:60:60', '100:100:100', '4:16:25 AM');
    > 21 |     expect(result).toBe('[(4, 16, 24), (4, 16, 25)]');
         |                    ^
      22 |   });
      23 |
      24 |   test('if all values are invalid, an empty list is returned', function () {

      at Object.toBe (src/problem-06.test.js:21:20)

PASS src/problem-04.test.js
  ● Console

    console.log
      Dec

      at log (src/solutions.js:385:11)

    console.log
      2023-12-10T04:00:00.000Z

      at log (src/solutions.js:432:11)

    console.log
      Dec

      at log (src/solutions.js:385:11)

    console.log
      2023-12-10T04:00:00.000Z

      at log (src/solutions.js:432:11)

    console.log
      Dec

      at log (src/solutions.js:385:11)

    console.log
      2023-12-10T04:00:00.000Z

      at log (src/solutions.js:432:11)

    console.log
      Dec

      at log (src/solutions.js:385:11)

    console.log
      Dec

      at log (src/solutions.js:385:11)

    console.log
      2023-12-17T04:00:00.000Z

      at log (src/solutions.js:432:11)

    console.log
      Jan

      at log (src/solutions.js:385:11)

    console.log
      2023-01-10T04:00:00.000Z

      at log (src/solutions.js:432:11)

    console.log
      Dec

      at log (src/solutions.js:385:11)

    console.log
      2023-12-01T04:00:00.000Z

      at log (src/solutions.js:432:11)

    console.log
      Dec

      at log (src/solutions.js:385:11)

    console.log
      2023-12-01T04:00:00.000Z

      at log (src/solutions.js:432:11)

    console.log
      Jan

      at log (src/solutions.js:385:11)

    console.log
      2023-01-12T04:00:00.000Z

      at log (src/solutions.js:432:11)

    console.log
      date

      at log (src/solutions.js:385:11)

PASS src/problem-07.test.js
PASS src/problem-08.test.js
PASS src/problem-02.test.js
PASS src/problem-00.test.js
PASS src/problem-01.test.js

Test Suites: 2 failed, 7 passed, 9 total
Tests:       6 failed, 59 passed, 65 total
Snapshots:   0 total
Time:        2.298 s, estimated 3 s
Ran all test suites.
